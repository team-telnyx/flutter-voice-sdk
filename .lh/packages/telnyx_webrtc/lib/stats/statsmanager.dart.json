{
    "sourceFile": "packages/telnyx_webrtc/lib/stats/statsmanager.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1732105758108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732113058069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,16 @@\n import 'dart:async';\n import 'dart:convert';\n+import 'package:flutter_webrtc/flutter_webrtc.dart';\n+import 'package:telnyx_webrtc/stats/stats_params.dart';\n+import 'package:telnyx_webrtc/tx_socket.dart';\n import 'package:uuid/uuid.dart';\n \n class StatsManager {\n+  StatsManager(this.socket,this.peerConnection,this.callId) \n+\n   final Timer? _timer = null;\n+    bool debugReportStarted = false;\n   final Uuid uuid = Uuid();\n   final int STATS_INITIAL = 1000; // Replace with appropriate initial delay\n   final int STATS_INTERVAL = 1000; // Replace with appropriate interval\n   final int CANDIDATE_LIMIT = 10; // Adjust as needed\n@@ -19,25 +25,25 @@\n   String? debugStatsId;\n   bool isDebugStats = false;\n \n   // Placeholder for `client` and `peerConnection`, replace with actual implementation.\n-  final dynamic client = null;\n-  final dynamic peerConnection = null;\n+  final TxSocket socket;\n+  final RTCPeerConnection peerConnection;\n   final String callId = 'sampleCallId'; // Replace with actual callId.\n \n   void stopTimer() {\n-    client?.stopStats(debugStatsId);\n+    socket?.stopStats(debugStatsId);\n     debugStatsId = null;\n     mainObject = {};\n     _timer?.cancel();\n   }\n \n   void startTimer() {\n     isDebugStats = true;\n \n-    if (client != null && !(client.debugReportStarted ?? false)) {\n+    if (socket != null && !(socket.debugReportStarted ?? false)) {\n       debugStatsId = uuid.v4();\n-      client?.startStats(debugStatsId);\n+      socket?.startStats(debugStatsId);\n     }\n \n     Timer.periodic(Duration(milliseconds: STATS_INTERVAL), (timer) {\n       mainObject = {\n@@ -86,11 +92,39 @@\n \n           print(\"Stats Inbound: ${jsonEncode(mainObject)}\");\n \n           if (debugStatsId != null) {\n-            client?.sendStats(mainObject, debugStatsId);\n+            socket?.sendStats(mainObject, debugStatsId);\n           }\n         }\n       });\n     });\n   }\n+\n+\n+   void startStats(String sessionId) {\n+    debugReportStarted = true;\n+    var loginMessage = InitiateOrStopStatParams(\n+      type: \"debug_report_start\",\n+      debugReportId: sessionId,\n+    );\n+    socket.send(jsonEncode(loginMessage.toJson()));\n+  }\n+\n+  void sendStats(Map<String, dynamic> data, String sessionId) {\n+    var statParams = StatParams(\n+      debugReportId: sessionId,\n+      reportData: data,\n+    );\n+    socket.send(jsonEncode(statParams.toJson()));\n+  }\n+\n+  void stopStats(String sessionId) {\n+    debugReportStarted = false;\n+    var loginMessage = InitiateOrStopStatParams(\n+      type: \"debug_report_stop\",\n+      debugReportId: sessionId,\n+    );\n+    socket.send(jsonEncode(loginMessage.toJson()));\n+  }\n+\n }\n"
                },
                {
                    "date": 1732115013817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,10 @@\n class StatsManager {\n   StatsManager(this.socket,this.peerConnection,this.callId) \n \n   final Timer? _timer = null;\n-    bool debugReportStarted = false;\n+  bool debugReportStarted = false;\n+  final String callId;\n   final Uuid uuid = Uuid();\n   final int STATS_INITIAL = 1000; // Replace with appropriate initial delay\n   final int STATS_INTERVAL = 1000; // Replace with appropriate interval\n   final int CANDIDATE_LIMIT = 10; // Adjust as needed\n@@ -41,9 +42,9 @@\n     isDebugStats = true;\n \n     if (socket != null && !(socket.debugReportStarted ?? false)) {\n       debugStatsId = uuid.v4();\n-      socket?.startStats(debugStatsId);\n+       startStats(debugStatsId!);\n     }\n \n     Timer.periodic(Duration(milliseconds: STATS_INTERVAL), (timer) {\n       mainObject = {\n@@ -52,10 +53,10 @@\n         \"peerId\": \"stats\",\n         \"connectionId\": callId,\n       };\n \n-      peerConnection?.getStats((stats) {\n-        stats['statsMap']?.forEach((key, value) {\n+peerConnection.getStats(null).then((value) {\n+          stats['statsMap']?.forEach((key, value) {\n           if (value['type'] == 'inbound-rtp') {\n             inBoundStats.add(value);\n           }\n           if (value['type'] == 'outbound-rtp') {\n@@ -96,8 +97,10 @@\n             socket?.sendStats(mainObject, debugStatsId);\n           }\n         }\n       });\n+   \n+   \n     });\n   }\n \n \n"
                },
                {
                    "date": 1732116892090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,13 @@\n         \"peerId\": \"stats\",\n         \"connectionId\": callId,\n       };\n \n-peerConnection.getStats(null).then((value) {\n-          stats['statsMap']?.forEach((key, value) {\n+      peerConnection.getStats(null).then((stats) {\n+          stats.forEach((report) {\n+\n+          report.values.forEach((key, value) {\n+        \n           if (value['type'] == 'inbound-rtp') {\n             inBoundStats.add(value);\n           }\n           if (value['type'] == 'outbound-rtp') {\n@@ -65,8 +68,9 @@\n           if (value['type'] == 'candidate-pair' &&\n               candidatePairs.length < CANDIDATE_LIMIT) {\n             candidatePairs.add(value);\n           }\n+          });\n         });\n \n         audio = {\n           \"inbound\": inBoundStats,\n"
                },
                {
                    "date": 1732116920203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,22 +54,22 @@\n         \"connectionId\": callId,\n       };\n \n       peerConnection.getStats(null).then((stats) {\n-          stats.forEach((report) {\n+        stats.forEach((report) {\n \n           report.values.forEach((key, value) {\n         \n-          if (value['type'] == 'inbound-rtp') {\n-            inBoundStats.add(value);\n-          }\n-          if (value['type'] == 'outbound-rtp') {\n-            outBoundStats.add(value);\n-          }\n-          if (value['type'] == 'candidate-pair' &&\n-              candidatePairs.length < CANDIDATE_LIMIT) {\n-            candidatePairs.add(value);\n-          }\n+            if (value['type'] == 'inbound-rtp') {\n+              inBoundStats.add(value);\n+            }\n+            if (value['type'] == 'outbound-rtp') {\n+             outBoundStats.add(value);\n+            }\n+            if (value['type'] == 'candidate-pair' &&\n+               candidatePairs.length < CANDIDATE_LIMIT) {\n+               candidatePairs.add(value);\n+            }\n           });\n         });\n \n         audio = {\n"
                },
                {
                    "date": 1732190410632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,29 +22,29 @@\n   List<dynamic> inBoundStats = [];\n   List<dynamic> outBoundStats = [];\n   List<dynamic> candidatePairs = [];\n \n-  String? debugStatsId;\n+  String debugStatsId = const Uuid().v4();\n   bool isDebugStats = false;\n \n   // Placeholder for `client` and `peerConnection`, replace with actual implementation.\n   final TxSocket socket;\n   final RTCPeerConnection peerConnection;\n   final String callId = 'sampleCallId'; // Replace with actual callId.\n \n   void stopTimer() {\n-    socket?.stopStats(debugStatsId);\n+    stopStats(debugStatsId);\n     debugStatsId = null;\n     mainObject = {};\n     _timer?.cancel();\n   }\n \n   void startTimer() {\n     isDebugStats = true;\n \n-    if (socket != null && !(socket.debugReportStarted ?? false)) {\n-      debugStatsId = uuid.v4();\n-       startStats(debugStatsId!);\n+    if (!debugReportStarted) {\n+        debugStatsId = uuid.v4();\n+       startStats(debugStatsId);\n     }\n \n     Timer.periodic(Duration(milliseconds: STATS_INTERVAL), (timer) {\n       mainObject = {\n@@ -82,8 +82,9 @@\n           \"audio\": audio,\n         };\n \n         mainObject[\"data\"] = statsData;\n+                mainObject[\"data\"] = statsData;\n         mainObject[\"timestamp\"] = DateTime.now().millisecondsSinceEpoch;\n \n         if (inBoundStats.isNotEmpty &&\n             outBoundStats.isNotEmpty &&\n@@ -97,9 +98,9 @@\n \n           print(\"Stats Inbound: ${jsonEncode(mainObject)}\");\n \n           if (debugStatsId != null) {\n-            socket?.sendStats(mainObject, debugStatsId);\n+            sendStats(mainObject, debugStatsId);\n           }\n         }\n       });\n    \n"
                },
                {
                    "date": 1732190422706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n           \"audio\": audio,\n         };\n \n         mainObject[\"data\"] = statsData;\n-                mainObject[\"data\"] = statsData;\n+                mainObject[\"connectionId\"] = callId;\n         mainObject[\"timestamp\"] = DateTime.now().millisecondsSinceEpoch;\n \n         if (inBoundStats.isNotEmpty &&\n             outBoundStats.isNotEmpty &&\n"
                }
            ],
            "date": 1732105758108,
            "name": "Commit-0",
            "content": "import 'dart:async';\nimport 'dart:convert';\nimport 'package:uuid/uuid.dart';\n\nclass StatsManager {\n  final Timer? _timer = null;\n  final Uuid uuid = Uuid();\n  final int STATS_INITIAL = 1000; // Replace with appropriate initial delay\n  final int STATS_INTERVAL = 1000; // Replace with appropriate interval\n  final int CANDIDATE_LIMIT = 10; // Adjust as needed\n\n  Map<String, dynamic> mainObject = {};\n  Map<String, dynamic> audio = {};\n  Map<String, dynamic> statsData = {};\n  List<dynamic> inBoundStats = [];\n  List<dynamic> outBoundStats = [];\n  List<dynamic> candidatePairs = [];\n  \n  String? debugStatsId;\n  bool isDebugStats = false;\n\n  // Placeholder for `client` and `peerConnection`, replace with actual implementation.\n  final dynamic client = null;\n  final dynamic peerConnection = null;\n  final String callId = 'sampleCallId'; // Replace with actual callId.\n\n  void stopTimer() {\n    client?.stopStats(debugStatsId);\n    debugStatsId = null;\n    mainObject = {};\n    _timer?.cancel();\n  }\n\n  void startTimer() {\n    isDebugStats = true;\n\n    if (client != null && !(client.debugReportStarted ?? false)) {\n      debugStatsId = uuid.v4();\n      client?.startStats(debugStatsId);\n    }\n\n    Timer.periodic(Duration(milliseconds: STATS_INTERVAL), (timer) {\n      mainObject = {\n        \"event\": \"stats\",\n        \"tag\": \"stats\",\n        \"peerId\": \"stats\",\n        \"connectionId\": callId,\n      };\n\n      peerConnection?.getStats((stats) {\n        stats['statsMap']?.forEach((key, value) {\n          if (value['type'] == 'inbound-rtp') {\n            inBoundStats.add(value);\n          }\n          if (value['type'] == 'outbound-rtp') {\n            outBoundStats.add(value);\n          }\n          if (value['type'] == 'candidate-pair' &&\n              candidatePairs.length < CANDIDATE_LIMIT) {\n            candidatePairs.add(value);\n          }\n        });\n\n        audio = {\n          \"inbound\": inBoundStats,\n          \"outbound\": outBoundStats,\n          \"candidatePair\": candidatePairs,\n        };\n\n        statsData = {\n          \"audio\": audio,\n        };\n\n        mainObject[\"data\"] = statsData;\n        mainObject[\"timestamp\"] = DateTime.now().millisecondsSinceEpoch;\n\n        if (inBoundStats.isNotEmpty &&\n            outBoundStats.isNotEmpty &&\n            candidatePairs.isNotEmpty) {\n          // Reset for next interval\n          inBoundStats = [];\n          outBoundStats = [];\n          candidatePairs = [];\n          statsData = {};\n          audio = {};\n\n          print(\"Stats Inbound: ${jsonEncode(mainObject)}\");\n\n          if (debugStatsId != null) {\n            client?.sendStats(mainObject, debugStatsId);\n          }\n        }\n      });\n    });\n  }\n}\n"
        }
    ]
}